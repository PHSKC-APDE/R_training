---
title: "r_practice_11_documentation_with_markdown_and_quarto"
author: "Ronald W. Buie"
format: html
output-file: "README.HTML"
---

This is a training session on the basic usage of R markdown and R studio's notebook functionality to better document your work and to generate reports for customers.

# What is a notebook?

Notebooks are a popular approach to documenting your work as-you-go across programming in research, data sciences, and application prototyping.

- Report generation: notebooks streamline the creation of technical reports by combining the calculation, visualization, and typesetting of final prose all into one document.
- Documentation: notebooks encourage human readable and verbose documentation of analytically processes and design decisions, including those that may not show up in the programming code itself.

A notebook document alternates between sections of typeset prose and programming code, so that you can get the best of both worlds.

When you compile ("knit") a notebook, you both run the code and generate a document, such as an html, pdf, or docx file. This document can contain outputs of the code, such as charts. You can also chose to show, or hide the code in the final document.

Notebook functionality is integrated into R studio, and a long standing feature.

## Some basic terminology:

- R Studio: An Integrated Development Environment specialized for R programming
- Markdown: A markup language (text formatting language) designed to be easy to type and easy to read when it isn't compiled, but to result in pretty and well formatted text when it is compiled. Here we use a flavor of markdown specific to R, simply called "R Markdown".
- (R/Quarto) Notebook: The notebook is the extension of the IDE that lets you blend your markdown language and your code. At its most simple, you can use it to alternate between markdown and programming code. At its most complex there really is no limit, but practical applications of notebooks include many web pages and dashboards.
  - knit: run all code and render the code, text, and any additional instructions into a document

# Your first notebook

R notebooks has 3 basic components. 

## Header

The header is at the top, and begins and ends with "---" marks. It takes certain keywords and options. The header in this document provides a good example for most option you might want to use.You can read more about headers [here]()

## Code Chunks

Code chunks (or chunks) are sections of your document that are ment to be read like you would a normal script. R code chunks begin with "```{r}" and end with "```". R Studio also supports addiitonal programming languages. For example, if you install a Python interpreter, you can begin a chunk with "```{python}" in order to run python code in that chunk.

## Text

Any section that is not a chunk, or the header, is markdown text. You can use special characters to choose how your text will be formatted when you knit the document.

# The vignette

Above you see how we can use the "#" sign to create header levels, and even inserted a link. Now let's walk through basics to making a more useful document. 

For this vignette, I want to write this particular document so that when I knit it, my thought process is clear, and there is helpful information in case someone needs to follow up on my work sometime later.

First, I want to setup my environment. I am going to keep this chunk hidden, but am going to write abou

```{r setup environment}
##Load packages and set defaults
pacman::p_load(data.table) # Load list of packages
library(rads) #if rads is not installed, pacman cannot auto install it for you. Loading it separately will make any error easier to see.
##Install or update RADS if not already insatlled
#remotes::install_github("PHSKC-APDE/rads", auth_token = NULL) #install RADS for the first time
#remotes::update_packages("rads") #update RADS if it is out of date
library(rads.data) #if rads.data is not installed, pacman cannot auto install it for you

##Set environment options
options(max.print = 350) # Limit # of rows to show when printing/showing a data.frame
options(tibble.print_max = 50) # Limit # of rows to show when printing/showing a tibble (a tidyverse-flavored data.frame)
options(scipen = 999) # Avoid scientific notation
origin <- "1970-01-01" # Set the origin date, which is needed for many data/time functions
export_path <- "C:/Users/REPLACE WITH YOUR USER NAME/OneDrive - King County/" #replace with your desired path, use forward slashes
```

Notice in our header we have setup options for html, pdf, and docx output. In all 3 we have 
